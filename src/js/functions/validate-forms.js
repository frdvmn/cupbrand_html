// src/js/modules/validateForms.js
import JustValidate from "just-validate";
import Inputmask from "../../../node_modules/inputmask/dist/inputmask.es6.js";

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º
 * @param {string} selector ‚Äî —Å–µ–ª–µ–∫—Ç–æ—Ä —Ñ–æ—Ä–º—ã (#brandform / #cupsform)
 * @param {GraphModal} modal ‚Äî —ç–∫–∑–µ–º–ø–ª—è—Ä GraphModal
 */
export const validateForms = (selector, modal) => {
  // console.log('üî• –í—ã–∑–æ–≤ validateForms –¥–ª—è:', selector, new Error().stack);

  const form = document.querySelector(selector);
  if (!form) return;

  const isBrand = selector === "#brandform";
  const isCups = selector === "#cupsform";

  // –ú–∞—Å–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  const phoneInputs = form.querySelectorAll("input[data-phone]");
  phoneInputs.forEach((input) => {
    if (!input.inputmask) {
      try {
        const mask = new Inputmask("+7 (999) 999-99-99");
        mask.mask(input);
      } catch (e) {
        console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∞—Å–∫—É", e);
        // –§–æ—Ä–º–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ–π –±–µ–∑ –º–∞—Å–∫–∏
      }
    }
  });

  const validator = new JustValidate(selector, {
    validateBeforeSubmitting: true,
  });

  // –û–±—â–∏–µ –ø–æ–ª—è
  validator.addField('[name="contact"]', [
    { rule: "required", errorMessage: "–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ" },
    { rule: "minLength", value: 2, errorMessage: "–ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞" },
  ]);

  validator.addField('[name="phone"]', [
    { rule: "required", errorMessage: "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω" },
    {
      rule: "function",
      validator: () => {
        const phoneInput = form.querySelector('input[name="phone"]');
        if (!phoneInput || !phoneInput.inputmask) return false;
        const unmasked = phoneInput.inputmask.unmaskedvalue();
        return unmasked.length === 10;
      },
      errorMessage: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
    },
  ]);

  // === –î–ª—è —Ñ–æ—Ä–º—ã –±—Ä–µ–Ω–¥–æ–≤: –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ (—á–µ–∫–±–æ–∫—Å) ===
  if (isBrand) {
    // –î–æ–±–∞–≤–ª—è–µ–º "–≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ" –ø–æ–ª–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —á–µ–∫–±–æ–∫—Å–∞
    validator.addField('[name="size"]', [
      {
        rule: "function",
        validator: () => {
          return form.querySelector('input[name="size"]:checked') !== null;
        },
        errorMessage: "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–∫–∞–Ω—á–∏–∫–∞",
      },
    ]);

    validator.addField('[name="comment"]', [
      { rule: "maxLength", value: 500, errorMessage: "–ù–µ –±–æ–ª–µ–µ 500 —Å–∏–º–≤–æ–ª–æ–≤" },
    ]);
  }

  // === –î–ª—è –∫–æ—Ñ–µ–π–Ω–∏: –≥–æ—Ä–æ–¥ ===
  if (isCups) {
    validator.addField('[name="city"]', [
      { rule: "required", errorMessage: "–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥" },
      { rule: "minLength", value: 2, errorMessage: "–ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞" },
    ]);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞
  validator.onSuccess(async (event) => {
    const submitBtn = event.target.querySelector(
      ".form__submit, .coffe__form-submit",
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω
    if (submitBtn && !submitBtn.dataset.defaultText) {
      submitBtn.dataset.defaultText = submitBtn.textContent;
    }

    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
    if (submitBtn) {
      submitBtn.disabled = true;
      submitBtn.textContent = "–û—Ç–ø—Ä–∞–≤–∫–∞...";
    }

    const formData = new FormData(event.target);
    const data = {};
    for (const [key, value] of formData.entries()) {
      data[key] = value;
    }

    // === –¢–ê–ô–ú–ê–£–¢: 8 —Å–µ–∫—É–Ω–¥ ===
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 8000);

    try {
      const res = await fetch("/api/submit", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
        signal: controller.signal, // ‚Üê –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω—ã
      });

      clearTimeout(timeoutId);

      event.target.reset();
      // const phoneInputs = event.target.querySelectorAll('input[data-phone]');
      // phoneInputs.forEach(input => {
      //   if (input) input.value = '';
      // });

      if (res.ok) {
        modal.open("success");
        // console.log('success');
      } else {
        const err = await res.json().catch(() => ({}));
        document.getElementById("modal-error-text").textContent =
          err.error || "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞";
        modal.open("error");
      }
    } catch (e) {
      clearTimeout(timeoutId);

      let message = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
      if (e.name === "AbortError") {
        message = "–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.";
      }
      document.getElementById("modal-error-text").textContent = message;
      modal.open("error");
    } finally {
      // üîë –í–°–ï–ì–î–ê —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É ‚Äî –¥–∞–∂–µ –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç!
      if (submitBtn) {
        submitBtn.disabled = false;
        submitBtn.textContent = submitBtn.dataset.defaultText;
      }
    }
  });
};
