// server/bot.js
import express from 'express';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import bodyParser from 'body-parser';
import sqlite3 from 'sqlite3';
import dotenv from 'dotenv';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
dotenv.config({ path: join(__dirname, '..', '.env') });

// === üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
const TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const ADMIN_IDS = process.env.ADMIN_TELEGRAM_IDS
  ? process.env.ADMIN_TELEGRAM_IDS.split(',').map(id => Number(id.trim()))
  : [];

const PORT = 3001;

if (!TOKEN) {
  console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env');
  process.exit(1);
}

// === üóÉÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ===
const dbPath = join(__dirname, 'applications.db');
const db = new sqlite3.Database(dbPath);

db.serialize(() => {
  db.run(`
    CREATE TABLE IF NOT EXISTS applications (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      type TEXT NOT NULL,
      contact TEXT NOT NULL,
      phone TEXT NOT NULL,
      city TEXT,
      size TEXT,
      comment TEXT,
      status TEXT DEFAULT '–Ω–æ–≤–∞—è',
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )
  `);

  db.run('CREATE INDEX IF NOT EXISTS idx_status ON applications(status)');
  db.run('CREATE INDEX IF NOT EXISTS idx_type ON applications(type)');
  db.run('CREATE INDEX IF NOT EXISTS idx_type_status ON applications(type, status)');
});

// === ü§ñ Telegram –±–æ—Ç ===
let bot = null;
try {
  const { default: TelegramBot } = await import('node-telegram-bot-api');
  bot = new TelegramBot(TOKEN, { polling: true });

  bot.on('polling_error', (error) => {
    console.error('üö® Telegram polling error:', error.message);
  });
} catch (err) {
  console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Telegram –±–æ—Ç–∞:', err.message);
}

// === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
function getEmoji(status) {
  const map = {
    '–Ω–æ–≤–∞—è': 'üî¥ –Ω–æ–≤–∞—è',
    '–≤ —Ä–∞–±–æ—Ç–µ': 'üü° –≤ —Ä–∞–±–æ—Ç–µ',
    '–∑–∞–≤–µ—Ä—à–µ–Ω–∞': '‚úÖ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
    '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞': '‚ùå –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞'
  };
  return map[status] || status;
}

function notifyAdmins(app) {
  if (!bot) return;

  const { id, type, contact, phone, city, size, comment } = app;
  let message = '';

  if (type === 'cups') {
    message = `ü•§ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å—Ç–∞–∫–∞–Ω—á–∏–∫–∏\nüÜï –ó–∞—è–≤–∫–∞ #${id}\n–ö–æ–Ω—Ç–∞–∫—Ç: ${contact}\n–ì–æ—Ä–æ–¥: ${city}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${phone}`;
  } else if (type === 'brand') {
    message = `üè¢ –ó–∞—è–≤–∫–∞ –¥–ª—è –±—Ä–µ–Ω–¥–∞\nüÜï –ó–∞—è–≤–∫–∞ #${id}\n–ö–æ–Ω—Ç–∞–∫—Ç: ${contact}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\n–†–∞–∑–º–µ—Ä: ${size || '‚Äî'}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment || '‚Äî'}`;
  }

  message += `\n–°—Ç–∞—Ç—É—Å: ${getEmoji('–Ω–æ–≤–∞—è')}`;

  const keyboard = {
    inline_keyboard: [
      [{ text: '‚úÖ –í —Ä–∞–±–æ—Ç–µ', callback_data: `status:${id}:–≤ —Ä–∞–±–æ—Ç–µ` }],
      [{ text: '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞', callback_data: `status:${id}:–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞` }],
      [{ text: '‚úîÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∞', callback_data: `status:${id}:–∑–∞–≤–µ—Ä—à–µ–Ω–∞` }]
    ]
  };

  ADMIN_IDS.forEach(id => {
    bot.sendMessage(id, message, { reply_markup: keyboard }).catch(console.error);
  });
}

// === üìã –°–ø—Ä–∞–≤–∫–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏ /start ===
if (bot) {
  bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const helpMessage = `
üëã *–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏.*

üìã *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ /–∑–∞—è–≤–∫–∏ ‚Äî –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ (–Ω–æ–≤—ã–µ + –≤ —Ä–∞–±–æ—Ç–µ)
‚Ä¢ /–∑–∞—è–≤–∫–∏ –Ω–æ–≤—ã–µ ‚Äî —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ
‚Ä¢ /–∑–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ ‚Äî —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—Ç–µ
‚Ä¢ /–∑–∞—è–≤–∫–∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ ‚Äî –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ
‚Ä¢ /–∑–∞—è–≤–∫–∏ —Å—Ç–∞–∫–∞–Ω—á–∏–∫–∏ ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å—Ç–∞–∫–∞–Ω—á–∏–∫–∏
‚Ä¢ /–∑–∞—è–≤–∫–∏ –±—Ä–µ–Ω–¥ ‚Äî –∑–∞—è–≤–∫–∏ –æ—Ç –±—Ä–µ–Ω–¥–æ–≤

üí° –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.
    `;

    const keyboard = {
      keyboard: [
        ['/–∑–∞—è–≤–∫–∏', '/–∑–∞—è–≤–∫–∏ –Ω–æ–≤—ã–µ'],
        ['/–∑–∞—è–≤–∫–∏ —Å—Ç–∞–∫–∞–Ω—á–∏–∫–∏', '/–∑–∞—è–≤–∫–∏ –±—Ä–µ–Ω–¥'],
        ['/–∑–∞—è–≤–∫–∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ', '/–∑–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ']
      ],
      resize_keyboard: true
    };

    bot.sendMessage(chatId, helpMessage.trim(), {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  });
}

// === üìã –§—É–Ω–∫—Ü–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π ===
function handleApplicationsCommand(msg, match, page = 1) {
  const userId = msg.from.id;
  const filter = (match[2] || '').trim().toLowerCase();
  let baseQuery = `SELECT id, type, contact, phone, status FROM applications`;
  let countQuery = `SELECT COUNT(*) as total FROM applications`;
  let params = [];
  let desc = '';

  if (['—Å—Ç–∞–∫–∞–Ω—á–∏–∫–∏', 'cups'].some(w => filter.includes(w))) {
    baseQuery += ' WHERE type = ?';
    countQuery += ' WHERE type = ?';
    params.push('cups');
    desc = ' (—Å—Ç–∞–∫–∞–Ω—á–∏–∫–∏)';
  } else if (['–±—Ä–µ–Ω–¥', 'brand'].some(w => filter.includes(w))) {
    baseQuery += ' WHERE type = ?';
    countQuery += ' WHERE type = ?';
    params.push('brand');
    desc = ' (–±—Ä–µ–Ω–¥—ã)';
  }

  const statusFilters = [
    { keywords: ['–Ω–æ–≤—ã–µ'], value: '–Ω–æ–≤–∞—è' },
    { keywords: ['–≤ —Ä–∞–±–æ—Ç–µ'], value: '–≤ —Ä–∞–±–æ—Ç–µ' },
    { keywords: ['–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ', '–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ'], value: '–∑–∞–≤–µ—Ä—à–µ–Ω–∞' },
    { keywords: ['–æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ', '–æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ'], value: '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞' }
  ];

  let statusFilter = null;
  for (const { keywords, value } of statusFilters) {
    if (keywords.some(kw => filter.includes(kw))) {
      statusFilter = value;
      desc += ` + —Å—Ç–∞—Ç—É—Å "${keywords[0]}"`;
      break;
    }
  }

  if (statusFilter) {
    baseQuery += params.length ? ' AND status = ?' : ' WHERE status = ?';
    countQuery += params.length ? ' AND status = ?' : ' WHERE status = ?';
    params.push(statusFilter);
  }

  if (filter === '' && statusFilter === null && !desc) {
    baseQuery += " WHERE status IN ('–Ω–æ–≤–∞—è', '–≤ —Ä–∞–±–æ—Ç–µ')";
    countQuery += " WHERE status IN ('–Ω–æ–≤–∞—è', '–≤ —Ä–∞–±–æ—Ç–µ')";
    desc = ' (–∞–∫—Ç–∏–≤–Ω—ã–µ)';
  }

  const LIMIT = 5;
  const OFFSET = (page - 1) * LIMIT;

  db.get(countQuery, params, (err, countRow) => {
    if (err) return bot.sendMessage(userId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á—ë—Ç–∞ –∑–∞—è–≤–æ–∫');
    const total = countRow.total;
    const totalPages = Math.ceil(total / LIMIT);

    if (total === 0) {
      return bot.sendMessage(userId, `üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫${desc}.`);
    }

    db.all(`${baseQuery} ORDER BY id DESC LIMIT ${LIMIT} OFFSET ${OFFSET}`, params, (err, rows) => {
      if (err || rows.length === 0) {
        return bot.sendMessage(userId, `üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${page}${desc}.`);
      }

      const list = rows.map(row =>
        `#${row.id} [${row.type === 'brand' ? 'üè¢' : 'ü•§'}] ‚Äî ${row.contact} ‚Äî ${getEmoji(row.status)}`
      ).join('\n');

      const selectButtons = rows.map(row => ({
        text: `#${row.id}`,
        callback_data: `select:${row.id}`
      }));

      const inline_keyboard = [];
      for (let i = 0; i < selectButtons.length; i += 3) {
        inline_keyboard.push(selectButtons.slice(i, i + 3));
      }

      const navRow = [];
      if (page > 1) {
        navRow.push({ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: `page:${page - 1}:${filter}` });
      }
      navRow.push({ text: `${page}/${totalPages}`, callback_data: 'noop' });
      if (page < totalPages) {
        navRow.push({ text: '–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è', callback_data: `page:${page + 1}:${filter}` });
      }
      inline_keyboard.push(navRow);

      const messageText = `üìã –ó–∞—è–≤–∫–∏${desc} (—Å—Ç—Ä. ${page}/${totalPages}):\n\n${list}\n\nüëâ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –∏–ª–∏ –ª–∏—Å—Ç–∞–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:`;

      bot.sendMessage(userId, messageText, {
        reply_markup: { inline_keyboard }
      });
    });
  });
}

// === üìã –ö–æ–º–∞–Ω–¥—ã /–∑–∞—è–≤–∫–∏ ===
if (bot) {
  bot.onText(/^(\/–∑–∞—è–≤–∫–∏|\/applications)$/, (msg) => {
    handleApplicationsCommand(msg, { 2: '' }, 1);
  });

  bot.onText(/^(\/–∑–∞—è–≤–∫–∏|\/applications)\s+(.+)$/i, (msg, match) => {
    const userId = msg.from.id;
    if (!ADMIN_IDS.includes(userId)) {
      return bot.sendMessage(userId, 'üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.');
    }
    handleApplicationsCommand(msg, match, 1);
  });
}

// === üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫ ===
if (bot) {
  bot.on('callback_query', (query) => {
    const data = query.data;
    const userId = query.from.id;
    const chatId = query.message.chat.id;
    const messageId = query.message.message_id;

    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è ‚Äî —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    if (data.startsWith('page:')) {
      bot.deleteMessage(chatId, messageId).catch(() => {});
      const [, newPage, filter] = data.split(':');
      const fakeMsg = { from: { id: userId }, chat: { id: userId } };
      handleApplicationsCommand(fakeMsg, { 2: filter || '' }, parseInt(newPage));
      return bot.answerCallbackQuery(query.id);
    }

    if (data === 'noop') {
      return bot.answerCallbackQuery(query.id);
    }

    // –í—ã–±–æ—Ä –∑–∞—è–≤–∫–∏
    if (data.startsWith('select:')) {
      const appId = data.split(':')[1];
      db.get('SELECT type, contact, phone, city, size, comment, status FROM applications WHERE id = ?', [appId], (err, row) => {
        if (err || !row) {
          return bot.answerCallbackQuery(query.id, { text: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', show_alert: true });
        }

        let message = '';
        if (row.type === 'cups') {
          message = `ü•§ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å—Ç–∞–∫–∞–Ω—á–∏–∫–∏\nüÜî –ó–∞—è–≤–∫–∞ #${appId}\n–ö–æ–Ω—Ç–∞–∫—Ç: ${row.contact}\n–ì–æ—Ä–æ–¥: ${row.city}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${row.phone}`;
        } else {
          message = `üè¢ –ó–∞—è–≤–∫–∞ –¥–ª—è –±—Ä–µ–Ω–¥–∞\nüÜî –ó–∞—è–≤–∫–∞ #${appId}\n–ö–æ–Ω—Ç–∞–∫—Ç: ${row.contact}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${row.phone}\n–†–∞–∑–º–µ—Ä: ${row.size || '‚Äî'}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${row.comment || '‚Äî'}`;
        }
        message += `\n\n–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${getEmoji(row.status)}`;

        const keyboard = {
          inline_keyboard: [
            [{ text: '‚úÖ –í —Ä–∞–±–æ—Ç–µ', callback_data: `status:${appId}:–≤ —Ä–∞–±–æ—Ç–µ` }],
            [{ text: '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞', callback_data: `status:${appId}:–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞` }],
            [{ text: '‚úîÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∞', callback_data: `status:${appId}:–∑–∞–≤–µ—Ä—à–µ–Ω–∞` }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', callback_data: 'back_to_list' }]
          ]
        };

        // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –Ω–æ –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ
        bot.editMessageText(message, {
          chat_id: chatId,
          message_id: messageId,
          reply_markup: keyboard,
          parse_mode: 'Markdown'
        }).catch(() => {
          bot.sendMessage(chatId, message, { reply_markup: keyboard, parse_mode: 'Markdown' });
        });

        bot.answerCallbackQuery(query.id);
      });
      return;
    }

    // –°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞
    if (data.startsWith('status:')) {
      const [, appId, newStatus] = data.split(':');
      db.run('UPDATE applications SET status = ? WHERE id = ?', [newStatus, appId], () => {
        const statusMsg = `üÜî –ó–∞—è–≤–∫–∞ #${appId}\n–°—Ç–∞—Ç—É—Å: *${getEmoji(newStatus)}*`;
        bot.editMessageText(statusMsg, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown'
        }).catch(() => {
          bot.sendMessage(chatId, statusMsg, { parse_mode: 'Markdown' });
        });
        bot.answerCallbackQuery(query.id, { text: `–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: ${newStatus}` });
      });
      return;
    }

    // –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É
    if (data === 'back_to_list') {
      bot.deleteMessage(chatId, messageId).catch(() => {});
      const fakeMsg = { from: { id: userId }, chat: { id: userId } };
      handleApplicationsCommand(fakeMsg, { 2: '' }, 1);
      bot.answerCallbackQuery(query.id);
    }
  });
}

// === üåê Express —Å–µ—Ä–≤–µ—Ä ===
const app = express();

app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');
  if (req.method === 'OPTIONS') return res.sendStatus(200);
  next();
});

app.use(bodyParser.json());

app.get('/test', (req, res) => {
  res.json({ ok: true });
});

app.post('/api/submit', (req, res) => {
  const { type } = req.body;

  if (!['cups', 'brand'].includes(type)) {
    return res.status(400).json({ error: '–¢–∏–ø –∑–∞—è–≤–∫–∏: "cups" –∏–ª–∏ "brand"' });
  }

  let fields;
  if (type === 'cups') {
    const { contact, city, phone } = req.body;
    if (!contact || !city || !phone) {
      return res.status(400).json({ error: '–î–ª—è —Å—Ç–∞–∫–∞–Ω—á–∏–∫–æ–≤ –Ω—É–∂–Ω—ã: –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ, –≥–æ—Ä–æ–¥ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω' });
    }
    fields = { contact, phone, city, size: null, comment: null };
  } else {
    const { contact, phone, size, comment } = req.body;
    if (!contact || !phone || !size) {
      return res.status(400).json({ error: '–î–ª—è –±—Ä–µ–Ω–¥–æ–≤ –Ω—É–∂–Ω—ã: –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ, —Ç–µ–ª–µ—Ñ–æ–Ω –∏ —Ä–∞–∑–º–µ—Ä' });
    }
    fields = { contact, phone, city: null, size, comment };
  }

  const { contact, phone, city, size, comment } = fields;

  db.run(
    `INSERT INTO applications (type, contact, phone, city, size, comment)
     VALUES (?, ?, ?, ?, ?, ?)`,
    [type, contact, phone, city, size, comment],
    function (err) {
      if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ë–î:', err);
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è' });
      }

      db.get('SELECT * FROM applications WHERE id = ?', [this.lastID], (err, row) => {
        if (!err && bot) notifyAdmins(row);
        res.json({ ok: true });
      });
    }
  );
});

app.get('/api/applications', (req, res) => {
  db.all('SELECT * FROM applications ORDER BY id DESC', (err, rows) => {
    if (err) return res.status(500).json({ error: '–ë–î' });
    res.json(rows);
  });
});

app.listen(PORT, () => {
  console.log(`‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
  if (bot) console.log('ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω');
});
